class Graf():
    def __init__(self):
        self.dictionary = {}
        
    def find_vertex(self, vertex_to_find): # Ищет вершину по графу, если нашел - True, нет - False
        #print(self.dictionary)
        for vertex in self.dictionary.keys():
            if vertex_to_find == vertex:
                
                return True
        return False
    
    @staticmethod
    def __create_relation_dictionary(vertex, array_vertex_to_find): #Возврашает либо False, Либо {Ключ: Значение}
        for vertex_to_find in array_vertex_to_find:
            #print(f"{vertex_to_find} u {vertex}")
            if vertex_to_find == vertex:
                
                return True
        return False
    
    def find_relation_vertex(self, vertex_one, vertex_two, mode = 2):# Узнает, создана ли связь с вершиной, если да - True, нет - False, mode отвечает за ориентированность/неориентированность графа
        sm = {}
        if mode == 2:
            if self.find_vertex(vertex_two) == True:
                if self.__create_relation_dictionary(vertex_one, self.dictionary[vertex_two]) == True:
                    sm[vertex_two] = vertex_one
                    
        if self.find_vertex(vertex_one) == True:
                if self.__create_relation_dictionary(vertex_two, self.dictionary[vertex_one]) == True:
                    sm[vertex_one] = vertex_two
                    
        if sm != {}:
            return sm
        else:
            return False
        
    def __str__(self):
        return str(self.dictionary)
                    
    @staticmethod
    def __anti_collision(array, vertex): # Проверяет array, на наличие элемента vertex
        for x in array:
            if vertex == x:
                return True
        return False
    
    def create_vertex_unus(self, vertex_one, vertex_two):#Создает ориентированную связь двух вершин, в нашем случае, не используется
        if self.find_vertex(vertex_one) == True:
            if self.__anti_collision(self.dictionary[vertex_one], vertex_two) == False:
                self.dictionary[vertex_one].append(vertex_two)
        else:
            self.dictionary[vertex_one] = [vertex_two]
    
    def create_vertex_duo(self, vertex_key, vertex_to_append):# Создает Неориентированный граф, наш случай
        self.create_vertex_unus(vertex_key, vertex_to_append)
        self.create_vertex_unus(vertex_to_append, vertex_key)        
                
#%%    
x = Graf()
print(x.find_relation_vertex(4, 5))
x.create_vertex_duo(4, 5)
print(x.find_relation_vertex(4, 5))
x.create_vertex_duo(4, 6)
print(x)
#%%
x = {1:[2,3,4], 2:[1], 3:[1]}

x[3].append(55)
print(x)
